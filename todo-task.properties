spring.datasource.username: root
spring.datasource.password: root
spring.datasource.url: jdbc:mysql://localhost:3306/todo_taskdb
spring.jpa.hibernate.ddl-auto: update
spring.jpa.show-sql=true
#port 0 is used so that we get a dynamic port is assigned automatically
#server.port=0
#task-service.ribbon.listOfServers: http://localhost:8083/,http://localhost:8085/
eureka.client.service-url.default-zone: http://localhost:8761/eureka/
spring.application.name= todo-task

#when port is 0 we get a dynamic port, but if we start another instance then the new instance will not get registered with eureka
#if at all the port is hard-coded (like 8083, 8085) then we can see 2 instances. But because we are making spring boot generate the port dynamically,
#the dynamic port will be assigned to the microservice ie todo-task after it got registered with eureka. And when we run another instance the new
#instance will be re-registered with eureka and the first one is not shown in eureka console. To fix this (ie to show all instances of a service), we
#need to create eureka.instance.instance-id. This gives a unique id for every instance that we create and to get the unique id, we follow
	#- ${spring.application.name} which is todo-task in this file
	#- ${spring.application.instance_id:${random.value}} the instance_id value can be passed from cmd or it will generate a random value
#this technique can be applied to port number as well and remove the 0 hard-coded value for server.port
#here the PORT number will be passed as commandline arg while starting application if it is not provided then :0
server.port=${PORT:0}
eureka.instance.instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
#continuing with above notes, with the above config we'll get the instance added in eureka as service-name:random-value and if you run another 
#instance you will see the new instance getting registered in eureka console and the name will be like service-name:random-value
#we can pass our own instance-id rather than the random generated value by passing commands at the root path of the service (where the pom is seen).
#- mvn spring-boot:run -Dspring-boot.run.arguments=--spring.application.instance_id=kiran	and u'll see another instance with name as service-name:kiran
#- mvn spring-boot:run -Dspring-boot.run.arguments=--spring.application.instance_id=kumar,--server.port=8000 and u see service-name:kumar at 8000 port

#rabbitmq will help to pass messages between spring cloud bus and the microservices.
#for this reason the below info should also be placed in the config server
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest